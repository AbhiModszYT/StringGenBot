from asyncio.exceptions import TimeoutError
from Data import Data
from pyrogram import Client, filters
from telethon import TelegramClient
from telethon.sessions import StringSession
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import (
    ApiIdInvalid,
    PhoneNumberInvalid,
    PhoneCodeInvalid,
    PhoneCodeExpired,
    SessionPasswordNeeded,
    PasswordHashInvalid,
)
from telethon.errors import (
    ApiIdInvalidError,
    PhoneNumberInvalidError,
    PhoneCodeInvalidError,
    PhoneCodeExpiredError,
    SessionPasswordNeededError,
    PasswordHashInvalidError,
)


@Client.on_message(filters.private & ~filters.forwarded & filters.command("generate"))
async def main(_, msg):
    await msg.reply(
        "·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥è·¥ès·¥á ·¥õ ú·¥á ·¥ò è·¥õ ú·¥è…¥  ü…™ ô Ä·¥Ä Ä è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á s·¥õ Ä…™…¥…¢ s·¥áss…™·¥è…¥ Íú∞·¥è Ä",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("üßë‚Äçüíª ·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç", callback_data="pyrogram"),
                    InlineKeyboardButton("·¥õ·¥á ü·¥á·¥õ ú·¥è…¥ üßë‚Äçüíª", callback_data="telethon"),
                ]
            ]
        ),
    )


async def generate_session(bot, msg, telethon=False):
    await msg.reply(
        "s·¥õ·¥Ä Ä·¥õ…™…¥ ú {} s·¥áss…™·¥è…¥ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥...".format(
            "Telethon" if telethon else "Pyrogram"
        )
    )
    user_id = msg.chat.id
    api_id_msg = await bot.ask(
        user_id, "·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö  è·¥è·¥ú Ä `API_ID`", filters=filters.text
    )
    if await cancelled(api_id_msg):
        return
    try:
        api_id = int(api_id_msg.text)
    except ValueError:
        await api_id_msg.reply(
            "…¥·¥è·¥õ ·¥Ä ·¥†·¥Ä ü…™·¥Ö API_ID (·¥° ú…™·¥Ñ ú ·¥ç·¥ús·¥õ  ô·¥á ·¥Ä…¥ …™…¥·¥õ·¥á…¢·¥á Ä). ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.",
            quote=True,
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    api_hash_msg = await bot.ask(
        user_id, "·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö  è·¥è·¥ú Ä `API_HASH`", filters=filters.text
    )
    if await cancelled(api_id_msg):
        return
    api_hash = api_hash_msg.text
    phone_number_msg = await bot.ask(
        user_id,
        "…¥·¥è·¥° ·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö  è·¥è·¥ú Ä `·¥ò ú·¥è…¥·¥á_…¥·¥ú·¥ç ô·¥á Ä` ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥Ñ·¥è·¥ú…¥·¥õ Ä è ·¥Ñ·¥è·¥Ö·¥á. \n·¥áx·¥Ä·¥ç·¥ò ü·¥á : `+19876543210`",
        filters=filters.text,
    )
    if await cancelled(api_id_msg):
        return
    phone_number = phone_number_msg.text
    await msg.reply("s·¥á…¥·¥Ö…™…¥…¢ ·¥è·¥õ·¥ò...")
    if telethon:
        client = TelegramClient(StringSession(), api_id, api_hash)
    else:
        client = Client(":memory:", api_id, api_hash)
    await client.connect()
    try:
        if telethon:
            code = await client.send_code_request(phone_number)
        else:
            code = await client.send_code(phone_number)
    except (ApiIdInvalid, ApiIdInvalidError):
        await msg.reply(
            "`API_ID` ·¥Ä…¥·¥Ö `API_HASH` ·¥Ñ·¥è·¥ç ô…™…¥·¥Ä·¥õ…™·¥è…¥ …™s …™…¥·¥†·¥Ä ü…™·¥Ö. ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.",
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    except (PhoneNumberInvalid, PhoneNumberInvalidError):
        await msg.reply(
            "`PHONE_NUMBER` …™s …™…¥·¥†·¥Ä ü…™·¥Ö. ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.",
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    try:
        phone_code_msg = await bot.ask(
            user_id,
            "·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã Íú∞·¥è Ä ·¥Ä…¥ ·¥è·¥õ·¥ò …™…¥ ·¥èÍú∞Íú∞…™·¥Ñ…™·¥Ä ü ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ. …™Íú∞  è·¥è·¥ú …¢·¥è·¥õ …™·¥õ, s·¥á…¥·¥Ö ·¥è·¥õ·¥ò  ú·¥á Ä·¥á ·¥ÄÍú∞·¥õ·¥á Ä  Ä·¥á·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á  ô·¥á ü·¥è·¥° Íú∞·¥è Ä·¥ç·¥Ä·¥õ. \n…™Íú∞ ·¥è·¥õ·¥ò …™s `12345`, **·¥ò ü·¥á·¥Äs·¥á s·¥á…¥·¥Ö …™·¥õ ·¥Äs** `1 2 3 4 5`.",
            filters=filters.text,
            timeout=600,
        )
        if await cancelled(api_id_msg):
            return
    except TimeoutError:
        await msg.reply(
            "·¥õ…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥èÍú∞ 10 ·¥ç…™…¥·¥ú·¥õ·¥ás. ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.",
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    phone_code = phone_code_msg.text.replace(" ", "")
    try:
        if telethon:
            await client.sign_in(phone_number, phone_code, password=None)
        else:
            await client.sign_in(phone_number, code.phone_code_hash, phone_code)
    except (PhoneCodeInvalid, PhoneCodeInvalidError):
        await msg.reply(
            "·¥è·¥õ·¥ò …™s …™…¥·¥†·¥Ä ü…™·¥Ö. ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.",
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    except (PhoneCodeExpired, PhoneCodeExpiredError):
        await msg.reply(
            "·¥è·¥õ·¥ò …™s ·¥áx·¥ò…™ Ä·¥á·¥Ö. ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.",
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return
    except (SessionPasswordNeeded, SessionPasswordNeededError):
        try:
            two_step_msg = await bot.ask(
                user_id,
                " è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ  ú·¥Äs ·¥á…¥·¥Ä ô ü·¥á·¥Ö ·¥õ·¥°·¥è-s·¥õ·¥á·¥ò ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥. ·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ ú·¥á ·¥ò·¥Äss·¥°·¥è Ä·¥Ö.",
                filters=filters.text,
                timeout=300,
            )
        except TimeoutError:
            await msg.reply(
                "·¥õ…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥èÍú∞ 5 ·¥ç…™…¥·¥ú·¥õ·¥ás. ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.",
                reply_markup=InlineKeyboardMarkup(Data.generate_button),
            )
            return
        try:
            password = two_step_msg.text
            if telethon:
                await client.sign_in(password=password)
            else:
                await client.check_password(password=password)
            if await cancelled(api_id_msg):
                return
        except (PasswordHashInvalid, PasswordHashInvalidError):
            await two_step_msg.reply(
                "…™…¥·¥†·¥Ä ü…™·¥Ö ·¥ò·¥Äss·¥°·¥è Ä·¥Ö ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö. ·¥ò ü·¥á·¥Äs·¥á s·¥õ·¥Ä Ä·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ s·¥áss…™·¥è…¥ ·¥Ä…¢·¥Ä…™…¥.",
                quote=True,
                reply_markup=InlineKeyboardMarkup(Data.generate_button),
            )
            return
    if telethon:
        string_session = client.session.save()
    else:
        string_session = await client.export_session_string()
    text = "**{} s·¥õ Ä…™…¥…¢ s·¥áss…™·¥è…¥** \n\n`{}` \n\…¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö  ô è @AMBOTYT".format(
        "·¥õ·¥á ü·¥á·¥õ ú·¥è…¥" if telethon else "·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç", string_session
    )
    try:
        await client.send_message("me", text)
    except KeyError:
        pass
    await client.disconnect()
    await phone_code_msg.reply(
        "s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á·¥Ö {} s·¥õ Ä…™…¥…¢ s·¥áss…™·¥è…¥. \n\n·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás! \n\n ô è @AM_YTSUPPORT".format(
            "telethon" if telethon else "pyrogram"
        )
    )


async def cancelled(msg):
    if "/cancel" in msg.text:
        await msg.reply(
            "·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú·¥á ·¥ò Ä·¥è·¥Ñ·¥áss!",
            quote=True,
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return True
    elif "/restart" in msg.text:
        await msg.reply(
            " ô·¥è·¥õ …™s  Ä·¥ás·¥õ·¥Ä Ä·¥õ·¥á·¥Ö!",
            quote=True,
            reply_markup=InlineKeyboardMarkup(Data.generate_button),
        )
        return True
    elif msg.text.startswith("/"):  # Bot Commands
        await msg.reply("·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú·¥á …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥ ·¥ò Ä·¥è·¥Ñ·¥áss!", quote=True)
        return True
    else:
        return False
